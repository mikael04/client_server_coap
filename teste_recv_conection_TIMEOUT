#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/ioctl.h>
#include <ctype.h>
#include <string.h>
#include <string.h>
#include <unistd.h>

#define DEBUG 1
#define TIME_WAIT 1
#define WAIT_SEC 1
#define WAIT_NSEC 0
#define NUM_TIMEOUT 5

/* Sample UDP client */

int main(int argc, char**argv)
{
   int sockfd;
   //int n;
   struct sockaddr_in servaddr;
   //struct sockaddr_in cliaddr;
   //char sendline[1000];
   //char recvline[1000];

   if (argc != 2)
   {
      printf("usage:  udpcli <IP address>\n");
      exit(1);
   }

   sockfd=socket(AF_INET,SOCK_DGRAM,0);

   bzero(&servaddr,sizeof(servaddr));
   servaddr.sin_family = AF_INET;
   servaddr.sin_addr.s_addr=inet_addr(argv[1]);
   servaddr.sin_port=htons(32000);

#if TIME_WAIT == 0
   while (fgets(sendline, 10000,stdin) != NULL)
   {
      sendto(sockfd,sendline,strlen(sendline),0,
             (struct sockaddr *)&servaddr,sizeof(servaddr));
      n=recvfrom(sockfd,recvline,10000,0,NULL,NULL);
      recvline[n]=0;
      fputs(recvline,stdout);
   }
#endif

   char buf_in[256], buffer[256], string_aux[5];
   int num_timeouts = 0;
   memset(buf_in, 0, 256);
   memset(buffer, 0, 256);
   socklen_t szaddr = sizeof(servaddr);
   printf("Digite a mensagem a ser enviada:");
   fgets(buffer, 256, stdin);
   strtok(buffer, "\n");
   strncat (buffer, " ", 256);
   if(strcmp(buffer, "sair ") == 0)
      {
         sendto(sockfd,buffer,strlen(buffer),0,(struct sockaddr *)&servaddr, szaddr);
         printf("Fechando socket\n");
         close(sockfd);
         return 0;
      }
   else
   {
      
      struct timeval tv;
      tv.tv_sec = WAIT_SEC;
      tv.tv_usec = WAIT_NSEC;
      //static int timeout = TIMEOUT_MS;
      //sendto(fd, buf_out, rsplen, 0, (struct sockaddr *)&servaddr, sizeof(servaddr));
      //recvfrom(fd, buf_in, sizeof(buf_in), 0, (struct sockaddr *)&servaddr, sizeof(servaddr));
   		
   						
      sendto(sockfd,buffer,strlen(buffer),0,(struct sockaddr *)&servaddr, szaddr);
      while (num_timeouts < NUM_TIMEOUT)
      {
   	   if (setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO,&tv,sizeof(tv)) < 0) 
   	   {
   	   		perror("Error");
   	   }		
   	   else if (recvfrom(sockfd, buf_in, sizeof(buf_in), 0, (struct sockaddr *)&servaddr, &szaddr) < 0)
   	   {
   #if DEBUG
   	   		printf("buf in = %s\n", buf_in);
   #endif
               snprintf(string_aux, 5, "%d", num_timeouts);
               strncat (buffer, string_aux, 1000);
   	   		sendto(sockfd,buffer,strlen(buffer),0,(struct sockaddr *)&servaddr, szaddr);
   	   		printf("Timeout reached. Resending segment %d\n", num_timeouts);
   	   		num_timeouts++;
   	   }
   	   else
   	   {
   	   		num_timeouts = NUM_TIMEOUT;
   #if DEBUG
   	   		printf("msg received = ");
   	   		printf("buf in:  %s, len = %d\n", buf_in, strlen(buf_in));
   #endif
   	   }
   	}
   }
	close (sockfd);
   return 0;
    	//n = recvfrom(fd, buf_in, sizeof(buf_in), 0, (struct sockaddr *)&servaddr, sizeof(servaddr));
}
